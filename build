#!/bin/bash

# TODO: FUTURE: `ibuild' for continuous build of preview while writing 
#  based on `inotifywait'

ROOT=$(cd $(dirname $0) && pwd -P)

MAKEFILE=$ROOT/makefile-generated

BUILDSCRIPT_FILENAME='build-generated'
TMP_BUILDSCRIPT="/tmp/$BUILDSCRIPT_FILENAME"
BUILDSCRIPT="$ROOT/$BUILDSCRIPT_FILENAME"

INDEX_BUILDSCRIPT_FILENAME="index-build-generated"
INDEX_BUILDSCRIPT="$ROOT/$INDEX_BUILDSCRIPT_FILENAME"
INDEX_TMP_BUILDSCRIPT="/tmp/$INDEX_BUILDSCRIPT_FILENAME"

INDEX='index.html'
STYLESFILE='styles.css'
RAW=raw
POSTS=posts
PREVIEWS=/tmp/previews

MONTHS=(invalid January February March April May June July August September October November December)

META='<meta name="viewport" content="width=device-width, initial-scale=1.0">'
STYLES="<link rel=\"stylesheet\" type=\"text/css\" href=\"/$STYLESFILE\" />"

function init_makefile { 
cat << EOF > $MAKEFILE
.PHONY: default init clean buildall previewall
default: buildall

init: $POSTS $PREVIEWS/$POSTS

$POSTS:
	mkdir -p $POSTS

$PREVIEWS/$POSTS:
	mkdir -p $PREVIEWS/$POSTS

clean: 
	rm -rf $POSTS $INDEX

EOF
}

function gen_makefile_target {
cat << EOF >> $MAKEFILE
$POSTS/$1: $2 $BUILDSCRIPT
	bash $BUILDSCRIPT "$2" "$POSTS/$1" "$3" "$4" "$5"

$PREVIEWS/$POSTS/$1: $2 $BUILDSCRIPT $STYLESFILE
	bash $BUILDSCRIPT "$2" "$PREVIEWS/$POSTS/$1" "$3" "$4" "$5" "-preview"

EOF
}

function term_makefile {
cat << EOF >> $MAKEFILE
$INDEX: $INDEX_BUILDSCRIPT
	bash $INDEX_BUILDSCRIPT "$INDEX"

$PREVIEWS/$INDEX: $INDEX_BUILDSCRIPT $STYLESFILE
	bash $INDEX_BUILDSCRIPT "$PREVIEWS/$INDEX" "-preview"

buildall: init $INDEX $1
previewall: init $PREVIEWS/$INDEX $(echo $1 | sed "s%$POSTS/%$PREVIEWS/$POSTS/%g")

EOF
}

function init_index_buildfile {
cat << EOF > $INDEX_TMP_BUILDSCRIPT
  # THIS FILE IS AUTO-GENERATED. DO NOT EDIT - CHANGES WILL BE OVERWRITTEN.
  [[ \$# -eq 1 ]] || [[ \$# -eq 2 ]] || exit 187
  ROOT=\$(cd \$(dirname \$0) && pwd -P)
  echo -n > \$1
  echo -n "<html>" >>\$1
  echo -n   "<head>" >>\$1
  echo -n     "<title>On Management</title> <!-- TODO: seo stuffs -->" >>\$1
  echo -n     "$META" >>\$1

  if [[ "\$2" == "-preview" ]]; then
    echo -n   "<style>" >> \$1
    cat "\$ROOT/$STYLESFILE" >> \$1
    echo -n   "</style>" >> \$1
  else
    echo -n   "$STYLES" >> \$1
  fi

  echo -n   "</head>" >>\$1
  echo -n   "<body><div>" >>\$1
  echo -n     "<h1>On Management</h1>" >>\$1
  echo -n     "<ol reversed>" >>\$1
EOF
}

function gen_index_buildfile_link {
cat << EOF >> $INDEX_TMP_BUILDSCRIPT
  echo -n       "<li><a href="$1">$2 by $3 - $4</a></li>" >>\$1
EOF
}

function term_index_buildfile {
cat << EOF >> $INDEX_TMP_BUILDSCRIPT
  echo -n     "</ol>" >>\$1
  echo -n   "</div></body>" >>\$1
  echo -n "</html>" >>\$1
EOF
}

function gen_buildfile {
cat << EOF > $TMP_BUILDSCRIPT
  # THIS FILE IS AUTO-GENERATED. DO NOT EDIT - CHANGES WILL BE OVERWRITTEN.
  [[ \$# -eq 5 ]] || [[ \$# -eq 6 ]] || exit 187
  ROOT=\$(cd \$(dirname \$0) && pwd -P)
  echo -n > \$2
  echo -n "<html><head>" >> \$2
  echo -n "<title>\$3</title>" >> \$2
  echo -n "$META" >> \$2

  if [[ "\$6" == "-preview" ]]; then
    echo -n "<style>" >> \$2
    cat "\$ROOT/$STYLESFILE" >> \$2
    echo -n "</style>" >> \$2
  else
    echo -n "$STYLES" >> \$2
  fi

  echo -n "</head><body><div>" >> \$2
  echo -n "<h2>\$3</h2>" >> \$2
  echo -n "<h6>by \$4 - \$5</h6>" >> \$2
  echo -n "<p>" >> \$2
  cat \$1 \\
    | sed \\
      -e 's/^\([A-Z][^a-z]*\)\$/<\/p><h3>\1<\/h3><p>/g' \\
      -e 's/^[[:space:]]*\$/<\/p><p>/g' \\
      -e 's/^\[\(.*\)\]\$/<blockquote>\1<\/blockquote>/g' \\
      -e 's/ _\(..*\)_\([^a-zA-Z0-9]\)/ <em>\1<\/em>\2/g' \\
    | python -c "import re, sys; print re.sub(r'((\n-.*)+)', lambda x: '<ul><li>%s</li></ul>' % x.groups()[0][2:].replace('\n-', '</li><li>'), sys.stdin.read(), flags=re.MULTILINE)" \\
    | tr '\\n' ' ' \\
    | python -c "import re, string, sys; print(re.sub('<h3>([A-Z][^a-z]*)</h3>', lambda x: '<h3>%s</h3>' % string.capwords(x.groups()[0]).strip(), sys.stdin.readline()))" >> \$2
  echo -n "</p>" >> \$2
  echo -n "<br/><span class='no-print'>[<a href='/'>$POSTS</a>] [<a href='/\$1'>just the words</a>]</span></div></body></html>" >> \$2
  sed -i '' -e 's%<p>[[:space:]]*</p>%%g' \$2
EOF

# | python -c "import sys; print(sys.stdin.read().replace('\n', '<br/>'))" \\
# | sed -e 's%<br/>\(<br/>\)*</p>%</p>%g' -e 's%<p><br/>\(<br/>\)*%<p>%g'

}

function destfilename {
  read -r DATE TITLE AUTHOR < <(echo $1 | tr '.' ' ')
  echo "$DATE-${TITLE}.html"
}

function checksum {
  local PROG='md5sum'
  which $PROG >/dev/null 2>&1 || {
    PROG='md5 -q'
  }
  $PROG $1 | cut -d' ' -f1
}

function build {
  init_index_buildfile
  init_makefile

  gen_buildfile
  [[ ! -f "$BUILDSCRIPT" ]] || [[ "$(checksum "$TMP_BUILDSCRIPT")" != "$(checksum "$BUILDSCRIPT")" ]] && {
    cp "$TMP_BUILDSCRIPT" "$BUILDSCRIPT"
  }

  TARGETS=""
  for SOURCE in $(cd $RAW && find . -type f | sort -r); do
    SOURCE=$(echo $SOURCE | sed 's%\./%%')
    read -r DATE TITLE AUTHOR < <(echo $SOURCE | tr '.' ' ')

    DESTFILENAME="$(destfilename "$SOURCE")"
    TARGETS="$TARGETS $POSTS/$DESTFILENAME"

    TITLECASED=$(titlecase $TITLE)
    AUTHORCASED=$(titlecase $AUTHOR)
    DISPLAYDATE="$(atoi ${DATE:(-2)}) $(month ${DATE:4:2}) ${DATE:0:4}"

    gen_index_buildfile_link "$POSTS/$DESTFILENAME" "$TITLECASED" "$AUTHORCASED" "$DISPLAYDATE"
    gen_makefile_target "$DESTFILENAME" "raw/$SOURCE" "$TITLECASED" "$AUTHORCASED" "$DISPLAYDATE"
  done

  term_index_buildfile
  [[ ! -f "$INDEX_BUILDSCRIPT" ]] || [[ "$(checksum "$INDEX_TMP_BUILDSCRIPT")" != "$(checksum "$INDEX_BUILDSCRIPT")" ]] && {
    cp "$INDEX_TMP_BUILDSCRIPT" "$INDEX_BUILDSCRIPT"
  }

  term_makefile "$TARGETS"

  make -f $MAKEFILE $1
}

function titlecase {
  echo $1 | tr '-' ' ' | python -c "import string, sys; print(string.capwords(sys.stdin.readline()))"
}

function month {
  local IDX=$(atoi $1)
  echo ${MONTHS[$IDX]}
}

function atoi {
  echo $1 | sed 's/^0//'
}

function clean {
  [ -f $MAKEFILE ] && {
    make -f $MAKEFILE clean
    rm $MAKEFILE
  }

  [ -f $BUILDSCRIPT ] && rm $BUILDSCRIPT
  [ -f $INDEX_BUILDSCRIPT ] && rm $INDEX_BUILDSCRIPT
}

function main {
  if [[ "$1" == "clean" ]]; then
    clean
  elif [[ "$1" == "preview" ]]; then
    case $# in
    1)
      build 'previewall'
      echo "$PREVIEWS/$INDEX"
      ;;
    2)
      if [[ ! -f "$2" ]] || [[ "$2" != raw/* ]]; then
        echo "file doesn't exist, wasn't in the raw/ directory or wasn't specified as a path relative to \`build' (i.e. raw/*)" >&2
        echo 'usage: $PROG preview [raw/<filename>]' >&2
        exit 187
      fi

      PREVIEWFILE="$PREVIEWS/$POSTS/$(destfilename "$(basename "$2")")"
      build "$PREVIEWFILE"
      echo "$PREVIEWFILE"
      ;;
    *)
      echo 'usage: $PROG preview [raw/<filename>]' >&2
      exit 187
      ;;
    esac
  else
    build
  fi
}

cd "$ROOT"
main "$@"
